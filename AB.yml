############################################################################################
# Ashwin Kannoth @kannotha
# AB3 CloudFormation Template
# DATE HERE
############################################################################################

############################################################################################
# DESCRIPTION
############################################################################################

AWSTemplateFormatVersion: "2010-09-09"
Description: AB3 Ashwin Kannoth

############################################################################################
# PARAMETERS
############################################################################################

Parameters:

  pAuroraUser: #username for Aurora access
    AllowedPattern: '.*'
    Default: admin
    Description: Aurora master username
    MaxLength: '41'
    MinLength: '2'
    NoEcho: 'false'
    Type: String

  pAuroraPW: #password for Aurora access
    AllowedPattern: '[a-zA-Z0-9]*'
    Default: password
    Description: Aurora master password
    MaxLength: '41'
    MinLength: '8'
    NoEcho: 'true'
    Type: String

  pAMIID: #AMI ID for web server
    AllowedPattern: '.*'
    Default: ami-0b7de35cf47b997ae
    Description: AMI ID for the web server
    NoEcho: 'false'
    Type: AWS::EC2::Image::Id

  pBucketNameLogs: #bucket name for S3 log bucket
    AllowedPattern: '.*'
    Default: kannotha-logs
    Description: Bucket name for AB3 log bucket. Must be universally unique.
    MaxLength: '100'
    MinLength: '1'
    NoEcho: 'false'
    Type: String

  pBucketNameFirehose: #bucket name for S3 firehose bucket
    AllowedPattern: '.*'
    Default: kannotha-firehose-logs
    Description: Bucket name for Firehose stream destination. Must be universally unique.
    MaxLength: '100'
    MinLength: '1'
    NoEcho: 'false'
    Type: String


  pInstanceType: #Instance type for EC2
    AllowedPattern: '.*'
    Default: t2.medium
    Description: Instance type for EC2 web servers
    MaxLength: '100'
    MinLength: '1'
    NoEcho: 'false'
    Type: String

  pCooldown: #cooldown of EC2 autoscaling
    AllowedPattern: '.*'
    Default: '1'
    Description: Cooldown period (in seconds) before EC2 instances scale back in
    MaxLength: '10'
    MinLength: '1'
    NoEcho: 'false'
    Type: String

  pDesiredCapacity: #desired capacity of EC2 autoscaling
    AllowedPattern: '.*'
    Default: '2'
    Description: Desired number of EC2 instances in ASG
    MaxLength: '10'
    MinLength: '1'
    NoEcho: 'false'
    Type: String

  pMinSize: #min size of EC2 autoscaling
    AllowedPattern: '.*'
    Default: '2'
    Description: Minimum number of EC2 web servers in ASG
    MaxLength: '10'
    MinLength: '1'
    NoEcho: 'false'
    Type: String

  pMaxSize: #max size of EC2 autoscaling
    AllowedPattern: '.*'
    Default: '6'
    Description: Maximum number of EC2 web servers in ASG
    MaxLength: '10'
    MinLength: '1'
    NoEcho: 'false'
    Type: String

  pMinSuccessfulInstancesPercent: #min size of EC2 autoscaling
    AllowedPattern: '.*'
    Default: '0'
    Description: Minimum percentage of EC2 instances that must remain functional during an autoscaling update
    NoEcho: 'false'
    Type: String

  # pCertificateALB: #certificate ARN for ALB
  #   AllowedPattern: '.*'
  #   Default: 4b3d8cbb-5424-41bf-b173-9f9512455422
  #   Description: Certificate ARN for ALB
  #   MaxLength: '100'
  #   MinLength: '1'
  #   NoEcho: 'false'
  #   Type: String

  pNetworkIn: #network in value (bytes) before autoscaling
    AllowedPattern: '.*'
    Default: '100000'
    Description: Average bytes of network traffic in before autoscaling takes effect
    MaxLength: '10'
    MinLength: '1'
    NoEcho: 'false'
    Type: String


  #pSSHKeyPair: #SSH Key pair name
  #  AllowedPattern: '.*'
   # Default: ssh_test_kp
    #Description: SSH key pair name for access to web servers
    #NoEcho: 'false'
    #Type: AWS::EC2::KeyPair::KeyName



Resources:
############################################################################################
# VPC RESOURCES
############################################################################################

  rVPC: #VPC For Project
       Type: "AWS::EC2::VPC"
       Properties:
           CidrBlock: "10.0.0.0/16"
           EnableDnsSupport: true
           EnableDnsHostnames: true
           InstanceTenancy: "default"
           Tags: 
             - 
               Key: "Name"
               Value: "VPC"

  rDHCP:
       Type: "AWS::EC2::DHCPOptions"
       Properties:
           DomainName: !Sub "${AWS::Region}.compute.internal"

  rEC2VPCEndpoint:
      Type: "AWS::EC2::VPCEndpoint"
      Properties:
          VpcEndpointType: "Interface"
          VpcId: !Ref rVPC 
          ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
          PolicyDocument: |
              {
                  "Statement": [
                      {
                          "Action": "*",
                          "Effect": "Allow",
                          "Resource": "*",
                          "Principal": "*"
                      }
                  ]
              }
          SubnetIds: 
            - !Ref rPrivateSubnetA
            - !Ref rPrivateSubnetB
          PrivateDnsEnabled: true
          SecurityGroupIds: 
            - !Ref rSGVPCEndpoint

  rEC2VPCEndpoint2:
      Type: "AWS::EC2::VPCEndpoint"
      Properties:
          VpcEndpointType: "Interface"
          VpcId: !Ref rVPC
          ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2messages"
          PolicyDocument: |
              {
                  "Statement": [
                      {
                          "Action": "*",
                          "Effect": "Allow",
                          "Resource": "*",
                          "Principal": "*"
                      }
                  ]
              }
          SubnetIds: 
            - !Ref rPrivateSubnetA
            - !Ref rPrivateSubnetB
          PrivateDnsEnabled: true
          SecurityGroupIds: 
            - !Ref rSGVPCEndpoint

  rEC2VPCEndpoint3:
      Type: "AWS::EC2::VPCEndpoint"
      Properties:
          VpcEndpointType: "Interface"
          VpcId: !Ref rVPC
          ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
          PolicyDocument: |
              {
                  "Statement": [
                      {
                          "Action": "*",
                          "Effect": "Allow",
                          "Resource": "*",
                          "Principal": "*"
                      }
                  ]
              }
          SubnetIds: 
            - !Ref rPrivateSubnetA
            - !Ref rPrivateSubnetB
          PrivateDnsEnabled: true
          SecurityGroupIds: 
            - !Ref rSGVPCEndpoint

  rVPCFlowLog:
      Type: "AWS::EC2::FlowLog"
      DependsOn: rBucketPolicy
      Properties:
          ResourceId: !Ref rVPC
          TrafficType: "ALL"
          LogDestinationType: s3
          LogDestination: !Sub arn:aws:s3:::${rS3Logs}
          DeliverLogsPermissionArn: !GetAtt rIAMFlowLogsRole.Arn
          ResourceType: VPC
          LogFormat: "${version} ${account-id} ${interface-id} ${srcaddr} ${dstaddr} ${srcport} ${dstport} ${protocol} ${packets} ${bytes} ${start} ${end} ${action} ${log-status}"
          MaxAggregationInterval: 60
          Tags: 
            - 
              Key: "Name"
              Value: "MyVPC-Flowlog"

############################################################################################
# SUBNET RESORUCES
############################################################################################

  rPublicSubnetA:
      Type: "AWS::EC2::Subnet"
      Properties:
          AvailabilityZone: !Sub ${AWS::Region}a
          CidrBlock: "10.0.0.0/24"
          VpcId: !Ref rVPC
          MapPublicIpOnLaunch: false
          Tags:
            -
              Key: Name
              Value: SubnetPublicA

  rPublicSubnetB:
      Type: "AWS::EC2::Subnet"
      Properties:
          AvailabilityZone: !Sub ${AWS::Region}b
          CidrBlock: "10.0.1.0/24"
          VpcId: !Ref rVPC
          MapPublicIpOnLaunch: false
          Tags:
            -
              Key: Name
              Value: SubnetPublicB

  rPrivateSubnetA:
      Type: "AWS::EC2::Subnet"
      Properties:
          AvailabilityZone: !Sub ${AWS::Region}a
          CidrBlock: "10.0.2.0/24"
          VpcId: !Ref rVPC
          MapPublicIpOnLaunch: false
          Tags:
            -
              Key: Name
              Value: SubnetPrivateA

  rPrivateSubnetB:
      Type: "AWS::EC2::Subnet"
      Properties:
          AvailabilityZone: !Sub ${AWS::Region}b
          CidrBlock: "10.0.3.0/24"
          VpcId: !Ref rVPC
          MapPublicIpOnLaunch: false
          Tags: 
            - 
              Key: Name
              Value: SubnetPrivateB

############################################################################################
# ROUTE TABLES
############################################################################################

  rPublicRouteTableA: #route table for public subnet A
    Type: "AWS::EC2::RouteTable"
    Properties:
        VpcId: !Ref rVPC
        Tags: 
          - 
            Key: "Name"
            Value: "PublicA"

  rPublicRouteTableB: #route table for public subnet B
    Type: "AWS::EC2::RouteTable"
    Properties:
        VpcId: !Ref rVPC
        Tags: 
          - 
            Key: "Name"
            Value: "PublicB"

  rPrivateRouteTableA: #route table for private subnet A
    Type: "AWS::EC2::RouteTable"
    Properties:
        VpcId: !Ref rVPC
        Tags: 
          - 
            Key: "Name"
            Value: "PrivateA"

  rPrivateRouteTableB: #route table for private subnet B
    Type: "AWS::EC2::RouteTable"
    Properties:
        VpcId: !Ref rVPC
        Tags: 
          - 
            Key: "Name"
            Value: "PrivateB"

  rRoutePublicA: #route for public subnet A
    Type: AWS::EC2::Route
    DependsOn: rInternetGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref rInternetGateway
      RouteTableId: !Ref rPublicRouteTableA

  rRoutePublicB: #route for public subnet B
    Type: AWS::EC2::Route
    DependsOn: rInternetGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref rInternetGateway
      RouteTableId: !Ref rPublicRouteTableB

  rRoutePrivateA: #route for private subnet A
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref rNatGatewayA
      RouteTableId:
        !Ref rPrivateRouteTableA

  rRoutePrivateB: #route for private subnet B
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref rNatGatewayB
      RouteTableId:
        !Ref rPrivateRouteTableB

  rSubnetRouteAssociationPublicA: # connect route table to public subnet A
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref rPublicRouteTableA
      SubnetId: !Ref rPublicSubnetA

  rSubnetRouteAssociationPublicB: # connect route table to public subnet A
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref rPublicRouteTableB
      SubnetId: !Ref rPublicSubnetB

  rSubnetRouteAssociationPrivateA: # connect route table to public subnet A
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref rPrivateRouteTableA
      SubnetId: !Ref rPrivateSubnetA

  rSubnetRouteAssociationPrivateB: # connect route table to public subnet A
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref rPrivateRouteTableB
      SubnetId: !Ref rPrivateSubnetB

############################################################################################
# INTERNET GATEWAY + NAT GATEWAY & ELASTIC IP FOR NAT GATEWAY
############################################################################################

  rInternetGateway: #IGW definition
    Type: "AWS::EC2::InternetGateway"
    Properties:
        Tags: 
          - 
            Key: Name
            Value: InternetGateway

  rInternetGatewayAttachment: #attachment for IGW
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref rInternetGateway
      VpcId: !Ref rVPC

  rNatGatewayA: #NATGW for public subnet A
      Type: AWS::EC2::NatGateway
      Properties:
          SubnetId: !Ref rPublicSubnetA
          Tags: 
            - 
              Key: "Name"
              Value: "NGW-A"
          AllocationId: !GetAtt rEIPA.AllocationId

  rNatGatewayB: # NATGW for public subnet B
      Type: AWS::EC2::NatGateway
      Properties:
          SubnetId: !Ref rPublicSubnetB
          Tags: 
            - 
              Key: Name
              Value: NGW-B
          AllocationId: !GetAtt rEIPB.AllocationId

  rEIPA: #Elastic IP for NAT Gateway A
    Type: AWS::EC2::EIP
    DependsOn: rInternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - 
          Key: Name
          Value: EIPA

  rEIPB: #Elastic IP for NAT Gateway B
    Type: AWS::EC2::EIP
    DependsOn: rInternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - 
          Key: Name
          Value: EIPB

############################################################################################
# IAM ROLES
############################################################################################

  rIAMRoleForEC2: #IAM role for EC2 comtaining SSM/CodeDeploy
    Type: "AWS::IAM::Role"
    Properties:
        Path: "/"
        RoleName: "IAMRoleForEC2"
        AssumeRolePolicyDocument: |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "ec2.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              }
            ]
          }
        MaxSessionDuration: 3600
        ManagedPolicyArns: 
          - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
          - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy"
          - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
        Description: "Allows EC2 instances to call AWS services on your behalf."
        Tags: 
          - 
            Key: "Name"
            Value: "IAMRoleForEC2"

  rIAMInstanceProfile: #instance profile to work with autoscaling CI/CD
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - !Ref rIAMRoleForEC2

  rIAMFlowLogsRole:
      Type: "AWS::IAM::Role"
      Properties:
          Path: "/"
          RoleName: "flowlogsRole"
          AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"vpc-flow-logs.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
          MaxSessionDuration: 3600

############################################################################################
# SECURITY GROUPS
############################################################################################

  rSGPrivateEC2: #SG for private EC2 Instance
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG to allow communication between private resources
      GroupName: SGPrivateEC2
      SecurityGroupEgress:
        -
          CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
      SecurityGroupIngress:
        -
          Description: Allow HTTP from ALB to EC2
          FromPort: 80
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref rSGLoadBalancer
          SourceSecurityGroupOwnerId: !Ref AWS::AccountId
          ToPort: 80
      Tags:
        -
          Key: Name
          Value: SGPrivateEC2
      VpcId: !Ref rVPC

  rSGLoadBalancer: #SG for load balancer
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for application load balancer to allow HTTP and HTTPS traffic
      GroupName: SGLoadBalancer
      SecurityGroupEgress:
        -
          CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
      SecurityGroupIngress: 
        - 
          CidrIp: "0.0.0.0/0"
          FromPort: 80
          IpProtocol: "tcp"
          ToPort: 80
        - 
          CidrIpv6: "::/0"
          FromPort: 80
          IpProtocol: "tcp"
          ToPort: 80
        - 
          CidrIp: "0.0.0.0/0"
          FromPort: 443
          IpProtocol: "tcp"
          ToPort: 443
        - 
          CidrIpv6: "::/0"
          FromPort: 443
          IpProtocol: "tcp"
          ToPort: 443
      Tags: 
        - 
          Key: Name
          Value: SGLoadBalancer
      VpcId: !Ref rVPC

  rSGVPCEndpoint:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
          GroupDescription: SG for VPC endpoints for SSM 
          GroupName: "SSM-Inbound"
          VpcId: !Ref rVPC
          SecurityGroupIngress: 
            - 
              SourceSecurityGroupId: !Ref rSGPrivateEC2
              SourceSecurityGroupOwnerId: !Ref AWS::AccountId
              Description: "Inbound from EC2 SG"
              FromPort: 443
              IpProtocol: "tcp"
              ToPort: 443
          SecurityGroupEgress: 
            - 
              CidrIp: "0.0.0.0/0"
              IpProtocol: "-1"

  rSGAllowHTTPfromLB:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
          GroupDescription: Allow http from load balancer
          GroupName: "AllowHTTPfromLB"
          VpcId: !Ref rVPC
          SecurityGroupIngress: 
            - 
              SourceSecurityGroupId: !Ref rSGLoadBalancer
              SourceSecurityGroupOwnerId: !Ref AWS::AccountId
              Description: "Allow HTTP from LB"
              FromPort: 80
              IpProtocol: "tcp"
              ToPort: 80
          SecurityGroupEgress: 
            - 
              CidrIp: "0.0.0.0/0"
              IpProtocol: "-1"

  rSGforEFS:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
          GroupDescription: "Allow Port 2049 from EC2 SG "
          GroupName: SGforEFS
          VpcId: !Ref rVPC
          SecurityGroupIngress: 
            - 
              SourceSecurityGroupId: !Ref rSGPrivateEC2
              SourceSecurityGroupOwnerId: !Ref AWS::AccountId
              Description: "Allow Port 2049 from EC2 SG"
              FromPort: 2049
              IpProtocol: "tcp"
              ToPort: 2049
          SecurityGroupEgress: 
            - 
              CidrIp: "0.0.0.0/0"
              IpProtocol: "-1"

  rSGPrivateDB: #SG for DB resources
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG to allow communication between private resources
      GroupName: SGPrivateDB
      SecurityGroupEgress:
        -
          CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
      SecurityGroupIngress:
        -
          Description: Allow EC2 access to Aurora
          FromPort: 3306
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref rSGPrivateEC2
          SourceSecurityGroupOwnerId: !Ref AWS::AccountId
          ToPort: 3306
      Tags:
        -
          Key: Name
          Value: SGPrivateDB
      VpcId: !Ref rVPC





############################################################################################
# Load Balancer
############################################################################################

  rALB: #application load balancer
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
        #-
       #   Key: access_logs.s3.enabled
         # Value: 'true'
       # -
        #  Key: access_logs.s3.bucket
         # Value: !Ref rS3Logs
        #-
         # Key: access_logs.s3.prefix
          #Value: alb
        -
          Key: idle_timeout.timeout_seconds
          Value: '60'
        -
          Key: routing.http.desync_mitigation_mode
          Value: defensive
        -
          Key: routing.http.drop_invalid_header_fields.enabled
          Value: 'false'
        -
          Key: routing.http2.enabled
          Value: 'true'
        -
          Key: waf.fail_open.enabled
          Value: 'false'
      Name: ApplicationLoadBalancer
      Scheme: internet-facing
      SecurityGroups:
        - !Ref rSGLoadBalancer
      Subnets:
        - !Ref rPublicSubnetA
        - !Ref rPublicSubnetB
      Tags:
        -
          Key: Name
          Value: ALB
      Type: application

  rALBListener: #listener for application load balancer
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
        DefaultActions:
          -
            Order: 1
            TargetGroupArn: !Ref rTargetGroup
            Type: forward
        LoadBalancerArn: !Ref rALB
        Port: 80
        Protocol: HTTP


############################################################################################
# Target Groups
############################################################################################

  rTargetGroup: #target group for autoscaling and load balancing
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      DependsOn:
        - rEFSMountTargetA
        - rEFSMountTargetB
      Properties:
        HealthCheckEnabled: true
        HealthCheckIntervalSeconds: 5
        HealthCheckPath: /
        HealthCheckPort: '80'
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 2
        HealthyThresholdCount: 2
        Matcher:
          HttpCode: '200'
        Name: TargetGroup
        Port: 80
        Protocol: HTTP
        Tags:
          -
            Key: Name
            Value: TargetGroup
        TargetGroupAttributes:
          -
            Key: deregistration_delay.timeout_seconds
            Value: '0'
          -
            Key: load_balancing.algorithm.type
            Value: round_robin
          -
            Key: slow_start.duration_seconds
            Value: '0'
          -
            Key: stickiness.app_cookie.cookie_name
            Value: ''
          -
            Key: stickiness.app_cookie.duration_seconds
            Value: '86400'
          -
            Key: stickiness.enabled
            Value: 'false'
          -
            Key: stickiness.lb_cookie.duration_seconds
            Value: '86400'
          -
            Key: stickiness.type
            Value: lb_cookie
        TargetType: instance
        UnhealthyThresholdCount: 2
        VpcId: !Ref rVPC


############################################################################################
# LAUNCH CONFIGURATION 
############################################################################################

  rLaunchConfiguration: #launch template for pre-imaged Django web server
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn:
      - rEFSMountTargetA
      - rEFSMountTargetB
      #- rAuroraCluster
      #- rAuroraInstanceA
      #- rAuroraInstanceB
    Properties:
      LaunchConfigurationName: LaunchConfiguration
      EbsOptimized: false
      IamInstanceProfile: !GetAtt rIAMInstanceProfile.Arn
      ImageId: !Ref pAMIID
      InstanceType: !Ref pInstanceType
      #KeyName: !Ref pSSHKeyPair
      SecurityGroups:
        - !Ref rSGPrivateEC2
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            yum update -y
            yum install -y httpd
            systemctl start httpd.service
            systemctl enable httpd.service
            yum -y install ruby
            yum install wget
            cd /home/ec2-user
            wget https://aws-codedeploy-ca-central-1.s3.ca-central-1.amazonaws.com/latest/install
            chmod +x ./install
            sudo ./install auto
            mkdir /efs
            sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport ${rEFS}.efs.${AWS::Region}.amazonaws.com:/ /efs
            sudo yum install -y mysql

############################################################################################
# AUTO SCALING GROUP
############################################################################################

  rAutoScalingPolicy: #autoscaling policy with 100KB average network in scaling value
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref rAutoScalingGroup
      EstimatedInstanceWarmup: 20
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
          DisableScaleIn: false
          PredefinedMetricSpecification:
            PredefinedMetricType: ASGAverageNetworkIn
          TargetValue: !Ref pNetworkIn

  rAutoScalingGroup: #autoscaling group for web servers
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      AutoScalingCreationPolicy:
        MinSuccessfulInstancesPercent: !Ref pMinSuccessfulInstancesPercent
      ResourceSignal:
        Count: 1
        Timeout: PT5M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
    DependsOn:
      - rEFSMountTargetA
      - rEFSMountTargetB
    Properties:
      Cooldown: !Ref pCooldown
      DesiredCapacity: !Ref pDesiredCapacity
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref rLaunchConfiguration
      MaxSize: !Ref pMaxSize
      MetricsCollection:
        -
          Granularity: 1Minute
          Metrics:
            - GroupDesiredCapacity
            - GroupInServiceCapacity
            - GroupInServiceInstances
            - GroupMaxSize
            - GroupMinSize
            - GroupPendingInstances
            - GroupPendingCapacity
            - GroupStandbyCapacity
            - GroupStandbyInstances
            - GroupTerminatingCapacity
            - GroupTerminatingInstances
            - GroupTotalCapacity
            - GroupTotalInstances
      MinSize: !Ref pMinSize
      NewInstancesProtectedFromScaleIn: false
      #ServiceLinkedRoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling
      #Tags:
        #-
          #Key: backup
         # PropagateAtLaunch: true
         # Value: 'true'
       # -
          #Key: CodeDeployProvisioningDeploymentId
          #PropagateAtLaunch: true
          #Value: !Ref rCodeDeployApplication
      TargetGroupARNs:
        - !Ref rTargetGroup
      VPCZoneIdentifier:
        - !Ref rPrivateSubnetA
        - !Ref rPrivateSubnetB



############################################################################################
# EFS VOLUME
############################################################################################

  rEFS: #EFS volume
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      FileSystemTags:
        -
          Key: backup
          Value: 'true'
        -
          Key: Name
          Value: EFS
      #KmsKeyId: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${pKMSEFS}
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
      

  rEFSMountTargetA: #mount target for private subnet A
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref rEFS
      SecurityGroups:
        - !Ref rSGforEFS
      SubnetId: !Ref rPrivateSubnetA

  rEFSMountTargetB: #mount target for private subnet B
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref rEFS
      SecurityGroups:
        - !Ref rSGforEFS
      SubnetId: !Ref rPrivateSubnetB

############################################################################################
# AURORA DATABASE
############################################################################################

  rAuroraSubnetGroup: #make subnet group for Aurora
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Aurora subnet group
      DBSubnetGroupName: aurora-subnet-group
      SubnetIds:
        - !Ref rPrivateSubnetA
        - !Ref rPrivateSubnetB
      Tags:
        -
          Key: Name
          Value: AuroraSubnetGroup

  rAuroraCluster: #Aurora cluster
      Type: AWS::RDS::DBCluster
      Properties:
        AvailabilityZones:
          - !Sub ${AWS::Region}a
          - !Sub ${AWS::Region}b
        BackupRetentionPeriod: 1
        DBClusterIdentifier: AuroraDB
        DBClusterParameterGroupName: default.aurora-mysql5.7
        DBSubnetGroupName: !Ref rAuroraSubnetGroup
        DatabaseName: AuroraCluster
        DeletionProtection: false
        EnableHttpEndpoint: false
        EnableIAMDatabaseAuthentication: false
        Engine: aurora-mysql
        EngineMode: provisioned
        EngineVersion: 5.7.mysql_aurora.2.07.2
        #KmsKeyId: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${pKMSAurora}
        MasterUserPassword: !Ref pAuroraPW
        MasterUsername: !Ref pAuroraUser
        Port: 3306
        PreferredBackupWindow: 05:55-06:25
        PreferredMaintenanceWindow: thu:07:23-thu:07:53
        StorageEncrypted: true
        Tags:
          -
            Key: backup
            Value: 'true'
          -
            Key: Name
            Value: AuroraCluster
        VpcSecurityGroupIds:
          - !Ref rSGPrivateDB

  rAuroraInstanceA: #Aurora instance 1
    Type: AWS::RDS::DBInstance
    Properties:
      AutoMinorVersionUpgrade: true
      AvailabilityZone: !Sub ${AWS::Region}a
      CACertificateIdentifier: rds-ca-2019
      DBClusterIdentifier: !Ref rAuroraCluster
      DBInstanceClass: db.t3.small
      DBInstanceIdentifier: AuroraInstanceA
      DBSubnetGroupName: !Ref rAuroraSubnetGroup
      EnablePerformanceInsights: false
      Engine: aurora-mysql
      EngineVersion: 5.7.mysql_aurora.2.07.2
      LicenseModel: general-public-license
      #MonitoringInterval: 60
      #MonitoringRoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/rds-monitoring-role
      PromotionTier: 1
      PubliclyAccessible: false
      Tags:
        -
          Key: backup
          Value: 'true'
        -
          Key: Name
          Value: AuroraInstanceA

  rAuroraInstanceB: #Aurora instance 2
    Type: AWS::RDS::DBInstance
    Properties:
      AutoMinorVersionUpgrade: true
      AvailabilityZone: !Sub ${AWS::Region}b
      CACertificateIdentifier: rds-ca-2019
      DBClusterIdentifier: !Ref rAuroraCluster
      DBInstanceClass: db.t3.small
      DBInstanceIdentifier: AuroraInstanceB
      DBSubnetGroupName: !Ref rAuroraSubnetGroup
      EnablePerformanceInsights: false
      Engine: aurora-mysql
      EngineVersion: 5.7.mysql_aurora.2.07.2
      LicenseModel: general-public-license
      #MonitoringInterval: 60
      #MonitoringRoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/rds-monitoring-role
      PromotionTier: 1
      PubliclyAccessible: false
      Tags:
        -
          Key: backup
          Value: 'true'
        -
          Key: Name
          Value: AuroraInstanceB

############################################################################################
# CI/CD APPLICATION PIPELINE
############################################################################################

  rRepository: #CodeCommit repo for hosting source code
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryDescription: Code Repo
      RepositoryName: code-repo
      Tags:
        -
          Key: Name
          Value: Repository

  rPipeline: #codepipeline for application CI/CD
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: CodePipeline
      RoleArn: !GetAtt rIAMRoleCodePipeline.Arn
      ArtifactStore:
        Location: kannotha-codepipeline
        Type: S3
      Stages:
        -
          Name: Source
          Actions:
            -
              Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: '1'
              Configuration:
                BranchName: master
                OutputArtifactFormat: CODE_ZIP
                PollForSourceChanges: false
                RepositoryName: !GetAtt rRepository.Name
              OutputArtifacts:
                -
                  Name: SourceArtifact
              Region: !Ref AWS::Region
              Namespace: SourceVariables
              RunOrder: 1
        -
          Name: Deploy
          Actions:
            -
              Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: '1'
              Configuration:
                ApplicationName: deploy-application
                DeploymentGroupName: !Ref rCodeDeployDeploymentGroup
              InputArtifacts:
                -
                  Name: SourceArtifact
              Region: !Ref AWS::Region
              RunOrder: 1
      Tags:
        -
          Key: Name
          Value: Pipeline

  rCodeDeployDeploymentGroup: #CodeDeploy deployment group definition
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref rCodeDeployApplication
      AutoRollbackConfiguration:
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE
      AutoScalingGroups:
        - !Ref rAutoScalingGroup
      DeploymentConfigName: CodeDeployDefault.OneAtATime
      DeploymentStyle:
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL
        DeploymentType: IN_PLACE
      ServiceRoleArn: !GetAtt rIAMRoleCodeDeploy.Arn

  rCodeDeployApplication: #CodeDeploy application definition
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: deploy-application
      ComputePlatform: Server

  rIAMPolicyCodePipeline: #policy for CodePipeline to have permissions
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument: |
        {
          "Statement": [
            {
              "Action": [
                "iam:PassRole"
              ],
              "Resource": "*",
              "Effect": "Allow",
              "Condition": {
                "StringEqualsIfExists": {
                  "iam:PassedToService": [
                    "cloudformation.amazonaws.com",
                    "elasticbeanstalk.amazonaws.com",
                    "ec2.amazonaws.com",
                    "ecs-tasks.amazonaws.com"
                  ]
                }
              }
            },
            {
              "Action": [
                "codecommit:CancelUploadArchive",
                "codecommit:GetBranch",
                "codecommit:GetCommit",
                "codecommit:GetRepository",
                "codecommit:GetUploadArchiveStatus",
                "codecommit:UploadArchive"
              ],
              "Resource": "*",
              "Effect": "Allow"
            },
            {
              "Action": [
                "codedeploy:CreateDeployment",
                "codedeploy:GetApplication",
                "codedeploy:GetApplicationRevision",
                "codedeploy:GetDeployment",
                "codedeploy:GetDeploymentConfig",
                "codedeploy:RegisterApplicationRevision"
              ],
              "Resource": "*",
              "Effect": "Allow"
            },
            {
              "Action": [
                "codestar-connections:UseConnection"
              ],
              "Resource": "*",
              "Effect": "Allow"
            },
            {
              "Action": [
                "elasticbeanstalk:*",
                "ec2:*",
                "elasticloadbalancing:*",
                "autoscaling:*",
                "cloudwatch:*",
                "s3:*",
                "sns:*",
                "cloudformation:*",
                "rds:*",
                "sqs:*",
                "ecs:*"
              ],
              "Resource": "*",
              "Effect": "Allow"
            },
            {
              "Action": [
                "lambda:InvokeFunction",
                "lambda:ListFunctions"
              ],
              "Resource": "*",
              "Effect": "Allow"
            },
            {
              "Action": [
                "opsworks:CreateDeployment",
                "opsworks:DescribeApps",
                "opsworks:DescribeCommands",
                "opsworks:DescribeDeployments",
                "opsworks:DescribeInstances",
                "opsworks:DescribeStacks",
                "opsworks:UpdateApp",
                "opsworks:UpdateStack"
              ],
              "Resource": "*",
              "Effect": "Allow"
            },
            {
              "Action": [
                "cloudformation:CreateStack",
                "cloudformation:DeleteStack",
                "cloudformation:DescribeStacks",
                "cloudformation:UpdateStack",
                "cloudformation:CreateChangeSet",
                "cloudformation:DeleteChangeSet",
                "cloudformation:DescribeChangeSet",
                "cloudformation:ExecuteChangeSet",
                "cloudformation:SetStackPolicy",
                "cloudformation:ValidateTemplate"
              ],
              "Resource": "*",
              "Effect": "Allow"
            },
            {
              "Action": [
                "codebuild:BatchGetBuilds",
                "codebuild:StartBuild",
                "codebuild:BatchGetBuildBatches",
                "codebuild:StartBuildBatch"
              ],
              "Resource": "*",
              "Effect": "Allow"
          },
            {
              "Effect": "Allow",
              "Action": [
                "devicefarm:ListProjects",
                "devicefarm:ListDevicePools",
                "devicefarm:GetRun",
                "devicefarm:GetUpload",
                "devicefarm:CreateUpload",
                "devicefarm:ScheduleRun"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "servicecatalog:ListProvisioningArtifacts",
                "servicecatalog:CreateProvisioningArtifact",
                "servicecatalog:DescribeProvisioningArtifact",
                "servicecatalog:DeleteProvisioningArtifact",
                "servicecatalog:UpdateProduct"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "cloudformation:ValidateTemplate"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "ecr:DescribeImages"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "states:DescribeExecution",
                "states:DescribeStateMachine",
                "states:StartExecution"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "appconfig:StartDeployment",
                "appconfig:StopDeployment",
                "appconfig:GetDeployment"
              ],
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        }
      Roles:
        - !Ref rIAMRoleCodePipeline
        #- !Ref rIAMRoleCloudFormationDeploy

  rIAMPolicyCloudWatchEvent: #policy for CloudWatch events to trigger CodePipeline
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "codepipeline:StartPipelineExecution"
              ],
              "Resource": [
                "*"
              ]
            }
          ]
        }
      Roles:
        - !Ref rIAMRoleCloudWatchEvent

  rIAMRoleCodeDeploy: #role for CodeDeploy
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": "codedeploy.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
      Path: /service-role/
      Tags:
        -
          Key: Name
          Value: IAMRoleCodeDeploy

  rIAMRoleCodePipeline: #role for CodePipeline
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "codepipeline.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeCommitReadOnly
      Path: /service-role/
      Tags:
        -
          Key: Name
          Value: IAMRoleCodePipeline

  rIAMRoleEC2: #IAM role for EC2 to enable CodeDeploy, made for instance profile
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy
      Path: /service-role/
      Tags:
        -
          Key: Name
          Value: IAMRoleEC2

  rIAMRoleCloudWatchEvent: #IAM role for CloudWatch events for CodeCommit and CodePipeline
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      Path: /service-role/
      Tags:
        -
          Key: Name
          Value: IAMRoleCloudWatchEvent

  rCloudWatchEventsRule: #CloudWatch events rule for triggering CodePipeline
    Type: AWS::Events::Rule
    Properties:
      EventPattern: !Sub |
        {
          "source": [
            "aws.codecommit"
          ],
          "detail-type": [
            "CodeCommit Repository State Change"
          ],
          "resources": [
            "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${rRepository.Name}"
          ],
          "detail": {
            "event": [
              "referenceCreated",
              "referenceUpdated"
            ],
            "referenceType": [
              "branch"
            ],
            "referenceName": [
              "master"
            ]
          }
        }
      Targets:
        -
          Arn: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${rPipeline}
          Id: codepipeline-cloudwatchtrigger
          RoleArn: !GetAtt rIAMRoleCloudWatchEvent.Arn

############################################################################################
# S3 BUCKETS
############################################################################################

  rS3BucketCodePipeline: #bucket for codepipeline to store files
      Type: "AWS::S3::Bucket"
      Properties:
          BucketName: kannotha-codepipeline
          BucketEncryption: 
              ServerSideEncryptionConfiguration: 
                - 
                  ServerSideEncryptionByDefault: 
                      SSEAlgorithm: "AES256"
                  BucketKeyEnabled: false

  rS3Logs:
      Type: "AWS::S3::Bucket"
      Properties:
          BucketName: !Ref pBucketNameLogs
          BucketEncryption: 
              ServerSideEncryptionConfiguration: 
                - 
                  ServerSideEncryptionByDefault: 
                      SSEAlgorithm: "AES256"
                  BucketKeyEnabled: false

  rS3Firehose:
      Type: "AWS::S3::Bucket"
      Properties:
          BucketName: !Ref pBucketNameFirehose
          BucketEncryption: 
              ServerSideEncryptionConfiguration: 
                - 
                  ServerSideEncryptionByDefault: 
                      SSEAlgorithm: "AES256"
                  BucketKeyEnabled: false

  rBucketPolicy:
      Type: "AWS::S3::BucketPolicy"
      Properties:
          Bucket: !Ref rS3Logs
          PolicyDocument: 
              Version: "2012-10-17"
              Id: "AWSLogDeliveryWrite20150319"
              Statement: 
                - 
                  Sid: "AWSLogDeliveryWrite"
                  Effect: "Allow"
                  Principal: 
                      Service: "delivery.logs.amazonaws.com"
                  Action: "s3:PutObject"
                  Resource: !Sub "arn:aws:s3:::${rS3Logs}/AWSLogs/${AWS::AccountId}/*"
                  Condition: 
                      StringEquals: 
                          "s3:x-amz-acl": "bucket-owner-full-control"
                - 
                  Sid: "AWSLogDeliveryAclCheck"
                  Effect: "Allow"
                  Principal: 
                      Service: "delivery.logs.amazonaws.com"
                  Action: "s3:GetBucketAcl"
                  Resource: !Sub "arn:aws:s3:::${rS3Logs}"

############################################################################################
# FIREHOSE
############################################################################################

  rKinesisFirehoseDeliveryStream:
          Type: "AWS::KinesisFirehose::DeliveryStream"
          Properties:
              DeliveryStreamName: "KinesisDemo"
              DeliveryStreamType: "DirectPut"
              #DeliveryStreamEncryptionConfigurationInput: {}
              S3DestinationConfiguration: 
                  BucketARN: !Sub arn:aws:s3:::${rS3Firehose}
                  BufferingHints: 
                      SizeInMBs: 1
                      IntervalInSeconds: 60
                  CloudWatchLoggingOptions: 
                      Enabled: true
                      LogGroupName: "/aws/kinesisfirehose/KinesisDemo"
                      LogStreamName: "S3Delivery"
                  CompressionFormat: "UNCOMPRESSED"
                  EncryptionConfiguration: 
                      NoEncryptionConfig: "NoEncryption"
                  #Prefix: ""
                  RoleARN: !GetAtt  rIAMKinesis.Arn


  rIAMManagedPolicyKinesis:
      Type: "AWS::IAM::ManagedPolicy"
      Properties:
          ManagedPolicyName: !Sub "KinesisFirehoseServicePolicy-KinesisDemo-${AWS::Region}"
          Path: "/service-role/"
          PolicyDocument: !Sub |
              {
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Sid": "",
                          "Effect": "Allow",
                          "Action": [
                              "glue:GetTable",
                              "glue:GetTableVersion",
                              "glue:GetTableVersions"
                          ],
                          "Resource": [
                              "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog",
                              "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%",
                              "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%/%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%"
                          ]
                      },
                      {
                          "Sid": "",
                          "Effect": "Allow",
                          "Action": [
                              "s3:AbortMultipartUpload",
                              "s3:GetBucketLocation",
                              "s3:GetObject",
                              "s3:ListBucket",
                              "s3:ListBucketMultipartUploads",
                              "s3:PutObject"
                          ],
                          "Resource": [
                              "arn:aws:s3:::kannotha-firehose-logs",
                              "arn:aws:s3:::kannotha-firehose-logs/*"
                          ]
                      },
                      {
                          "Sid": "",
                          "Effect": "Allow",
                          "Action": [
                              "lambda:InvokeFunction",
                              "lambda:GetFunctionConfiguration"
                          ],
                          "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%"
                      },
                      {
                          "Effect": "Allow",
                          "Action": [
                              "kms:GenerateDataKey",
                              "kms:Decrypt"
                          ],
                          "Resource": [
                              "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%"
                          ],
                          "Condition": {
                              "StringEquals": {
                                  "kms:ViaService": "s3.${AWS::Region}.amazonaws.com"
                              },
                              "StringLike": {
                                  "kms:EncryptionContext:aws:s3:arn": [
                                      "arn:aws:s3:::%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%/*"
                                  ]
                              }
                          }
                      },
                      {
                          "Sid": "",
                          "Effect": "Allow",
                          "Action": [
                              "logs:PutLogEvents"
                          ],
                          "Resource": [
                              "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/kinesisfirehose/KinesisDemo:log-stream:*"
                          ]
                      },
                      {
                          "Sid": "",
                          "Effect": "Allow",
                          "Action": [
                              "kinesis:DescribeStream",
                              "kinesis:GetShardIterator",
                              "kinesis:GetRecords",
                              "kinesis:ListShards"
                          ],
                          "Resource": "arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%"
                      },
                      {
                          "Effect": "Allow",
                          "Action": [
                              "kms:Decrypt"
                          ],
                          "Resource": [
                              "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%"
                          ],
                          "Condition": {
                              "StringEquals": {
                                  "kms:ViaService": "kinesis.${AWS::Region}.amazonaws.com"
                              },
                              "StringLike": {
                                  "kms:EncryptionContext:aws:kinesis:arn": "arn:aws:kinesis:ca-central-1:${AWS::AccountId}:stream/%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%"
                              }
                          }
                      }
                  ]
              }

  rIAMKinesis:
      Type: "AWS::IAM::Role"
      Properties:
          Path: "/service-role/"
          #RoleName: !Sub "KinesisFirehoseServiceRole-KinesisDem-${AWS::Region}-1616682360239"
          AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"firehose.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
          MaxSessionDuration: 3600
          ManagedPolicyArns: 
            - !Ref rIAMManagedPolicyKinesis